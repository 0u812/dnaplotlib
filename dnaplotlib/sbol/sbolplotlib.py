#!/usr/bin/env python
"""
DNAplotlib SBOL Functionality
=============================
   This submodule extends the DNARenderer object to allow for rendering of SBOL
   objects generated by the pySBOL library. It also includes functions to navigate
   the object hierarchy.

   Be advised: this extention requires that pySBOL is fully installed and working.
"""
#    DNAplotlib
#    Copyright (C) 2015 by
#    Bryan Bartley <bartleyba@sbolstandard.org>
#    Thomas E. Gorochowski <tom@chofski.co.uk>
#    All rights reserved.
#    OSI Open Software License 3.0 (OSL-3.0) license.

import matplotlib
# As this is generally used interactively - update backend
matplotlib.use('TkAgg')
import dnaplotlib
import sbol

__author__  = 'Bryan Bartley <bartleyba@sbolstandard.org>\n\
               Thomas E. Gorochowski <tom@chofski.co.uk>, Voigt Lab, MIT'
__license__ = 'OSI OSL 3.0'
__version__ = '1.0'

class SBOLRenderer(dnaplotlib.DNARenderer):

    def SO_terms(self):
        """ Return dictionary of all standard built-in SBOL part renderers referenced by Sequence Ontology term
        """
        return {
        'SO_0000167': 'Promoter',
        'SO_0000316': 'CDS',
        'SO_0000141': 'Terminator',
        'SO_0000552': 'RBS',
        'SO_0001953': 'Scar',
        # No SO Term : 'Spacer',
        # No SO Term : 'EmptySpace',
        'SO_000037': 'Ribozyme',
        'SO_0001977': 'Ribonuclease',
        'SO_0001955': 'ProteinStability',
        'SO_0001956': 'Protease',
        'SO_0000057': 'Operator',
        # SO term insulator does not have same semantics : 'Insulator',
        'SO_0000296': 'Origin',
        'SO_0001932': '5Overhang',
        'SO_0001933': '3Overhang',
        'SO_0001687': 'RestrictionSite',
        'SO_0000299': 'RecombinaseSite',
        'SO_0001691': 'BluntRestrictionSite',
        'SO_0005850': 'PrimerBindingSite',
        'SO_0001694': '5StickyRestrictionSite',
        'SO_0001690': '3StickyRestrictionSite',
        'SO_0000001': 'UserDefined',
        'SO_0001978': 'Signature',
        }

    def renderSBOL(self, ax, target_component, part_renderers, opts=None):
        """
        Render a design from an SBOL DNA Component

        Parameters
        ----------
        ax : matplotlib.axes
            Axes to draw the design to.

        target_component : sbol.DNAComponent
            An sbol.DNAComponent that contains the design to draw. The design must contain a series of subcomponents
            arranged in linear order

        Returns
        -------
        start : float
            The x-point in the axis space that drawing begins.

        end : float
            The x-point in the axis space that drawing ends.
        """
        # class InteractiveDesign:
        #      def __init__(self, dpl_design):
        #          self.parts = dpl_design
        #          print self.parts
        #
        #      def drill_down(self, event):
        #         print 'click'
        #         if event.xdata != None and event.ydata != None:
        #             print(event.xdata, event.ydata)
        #             for part in self.parts:
        #                 if event.xdata > part['start'] and event.xdata < part['end']:
        #                     print part['name']

    def drill_down(event):
        """
        drill_down is the event handler for the plot.  If a user clicks, it will
        drill down a level in the SBOL hierarchy
        """
        if event.xdata != None and event.ydata != None:
            print(event.xdata, event.ydata)
            for i_part, part in enumerate(dpl_design):
                if event.xdata > part['start'] and event.xdata < part['end']:
                    selected_component = sbol_design[i_part]
                    # plt.close()
                    # fig = plt.figure()
                    # ax = plt.gca()
                    # start, end = self.renderSBOL(ax, selected_component, part_renderers)
                    # ax.set_xlim([start, end])
                    # ax.set_ylim([-18,18])
                    # ax.set_aspect('equal')
                    # ax.set_xticks([])
                    # ax.set_yticks([])
                    # ax.axis('off')
                    width = (part['end'] - part['start'])
                    height = 18
                    # ax.add_patch(Rectangle((event.xdata, -9), width, height, facecolor="grey"))
                    ax.add_patch(Rectangle(( part['start'], -5), 10, 10, facecolor="grey"))
                    fig = plt.gcf()
                    fig.canvas.draw()
                    print part['name']


    def _onMotion(event):
        if event.xdata != None and event.ydata != None: # mouse is inside the axes
            print(event.xdata, event.ydata)
            for i_part, part in enumerate(dpl_design):
                if event.xdata > part['start'] and event.xdata < part['end']:
                    selected_component = sbol_design[i_part]
                    width = (part['end'] - part['start'])
                    height = 18
                    # ax.add_patch(Rectangle((event.xdata, -9), width, height, facecolor="grey"))
                    ax.add_patch(Rectangle(( part['start'], -5), 10, 10, facecolor="grey"))
                    fig = plt.gcf()
                    fig.canvas.draw()
                    print part['name']
